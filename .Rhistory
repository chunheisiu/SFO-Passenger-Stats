data %>% filter(UniqueCarrier=="AA") %>% nrow()
data %>% count(UniqueCarrier) %>% filter(UniqueCarrier=="AA")
data %>% count(UniqueCarrier) %>% filter(UniqueCarrier=="AA") %>% select(n)
data %>% filter(TailNum[1]!="N")
data %>% filter(TailNum[1]!="N") %>% nrow()
str(data)
data %>% filter(is.na(TailNum)) %>% nrow()
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(Taxi,na.rm = T)) %>% top_n(-5,taxiInMean))
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(Taxi,na.rm = T)) %>% top_n(-5,taxiInMean)
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T)) %>% top_n(-5,taxiInMean)
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T)) %>% hist()
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T)) %>% hist(taxiInMean)
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T))
?hist
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T)) %>% hist(taxiInMean[2])
typeof(taxiInMean)
typeof(taxiInMean)
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T)) %>% hist(taxiInMean[,2])
data %>% group_by(UniqueCarrier) %>% summarise(taxiInMean = mean(TaxiIn,na.rm = T)) %>% hist(taxiInMean[1,2])
data %>% group_by(UniqueCarrier,FlightNum) %>% summarise(avgAirtime = mean(AirTime,na.rm=T)) %>% top(10,avgAirtime)
data %>% group_by(UniqueCarrier,FlightNum) %>% summarise(avgAirtime = mean(AirTime,na.rm=T)) %>% top_n(10,avgAirtime)
data %>% group_by(UniqueCarrier,FlightNum) %>% summarise(avgAirtime = mean(AirTime,na.rm=T), sdAirTime = sd(AirTime, na.rm=T)) %>% top_n(10,avgAirtime)
data %>% group_by(UniqueCarrier,FlightNum) %>% summarise(avgAirtime = mean(AirTime,na.rm=T), sdAirTime = sd(AirTime, na.rm=T)) %>% top_n(-10,avgAirtime)
data %>% group_by(UniqueCarrier,FlightNum) %>% summarise(avgAirtime = mean(AirTime,na.rm=T), sdAirTime = sd(AirTime, na.rm=T)) %>% print()
data %>% group_by(UniqueCarrier,FlightNum) %>% summarise(avgAirtime = mean(AirTime,na.rm=T), sdAirTime = sd(AirTime, na.rm=T), destination = Dest) %>% filter(FlightNum == 1755)
data %>% group_by(UniqueCarrier,FlightNum,Dest) %>% summarise(avgAirtime = mean(AirTime,na.rm=T), sdAirTime = sd(AirTime, na.rm=T)) %>% filter(FlightNum == 1755)
str(data)
data %>% group_by(UniqueCarrier,FlightNum,Origin,Dest) %>% summarise(avgAirtime = mean(AirTime,na.rm=T), sdAirTime = sd(AirTime, na.rm=T)) %>% filter(FlightNum == 1755)
library(dplyr)
search(dplyr)
search()
search()
.packages()
.packages()
(packages())
(.packages())
require(CARS)
require(MatchIt)
myVec <- c("abc",99)
myVec <- list("abc",99)
myVec <- c("abc",99)
class(myVec)
typeof(myVec)
typeof(myVec)
myVec <- factor(c("abc",99))
typeof(myVec)
class(myVec)
myVec <- factor(c("abc",99), levels = c("abc",99))
typeof(myVec)
class(myVec)
myVec <- factor(c("abc",99), levels = c("abc",99),ordered = T)
typeof(myVec)
class(myVec)
myVec[1]>myVec[2]
myVec <- factor(c("abc",99))
myVec[1]>myVec[2]
myVec <- factor(c("abc",99), levels = c("abc",99),ordered = T)
class(myVec)
typeof(myVec)
myVec[1]>myVec[2]
myVec <- factor(as.character(c("abc",99)), levels = c("abc",99),ordered = T)
class(myVec)
typeof(myVec)
myVec[1]>myVec[2]
myCyl <- mtcars$cyl
myCyl <- factor(mtcars$cyl,labels = c("Small","Medium","Large"),ordered=T)
sum(myCyl[myCyl<="Medium"])
myCyl[myCyl<="Medium"]
sum(myCyl[myCyl<="Medium"])
length(myCyl[myCyl<="Medium"])
set.seed(4)
ageData <- round(runif(1000000,0,120))
ageData <- factor(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf)
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"))
ageData <- factor(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf)
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"))
ageData <- factor(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf)
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"))
ageData <- cut(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf)
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"))
ageData <- factor(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf),
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"))
ageData <- cut(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf),
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"))
sum(ageData < "Adult")
ageData <- cut(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf),
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
ordered = T)
ageData <- round(runif(1000000,0,120))
ageData <- cut(ageData,breaks = c(-Inf,2,5,9,12,19,65,Inf),
levels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
labels = c("Infant","Toddler","Child","Tween","Teenager","Adult","Senior"),
ordered = T)
sum(ageData < "Adult")
ageData
table(ageData)
?dim()
classroom <- data.frame(first = c("Jacques","Charles"), last = c("Sham","Siu"), age = c(21,21))
classroom
classroom$work_exp <- c(64,24)
classroom
rbind(classroom, c("Spencer","Chan",21,12))
dplyr::bind_rows(classroom, c("Spencer","Chan",21,12))
dplyr::bind_rows(classroom, data.frame("Spencer","Chan",21,12))
classroom <- data.frame(first = c("Jacques","Charles"), last = c("Sham","Siu"), age = c(21,21))
classroom$work_exp <- c(64,24)
dplyr::bind_rows(classroom, data.frame("Spencer","Chan",21,12))
classroom <- data.frame(first = c("Jacques","Charles"), last = c("Sham","Siu"), age = c(21,21))
classroom$work_exp <- c(64,24)
dplyr::bind_rows(classroom, data.frame(c("Spencer","Chan",21,12)))
classroom <- data.frame(first = c("Jacques","Charles"), last = c("Sham","Siu"), age = c(21,21))
2
classroom <- data.frame(first = c("Jacques","Charles"), last = c("Sham","Siu"), age = c(21,21))
classroom$work_exp <- c(64,24)
dplyr::bind_rows(classroom, data.frame("Spencer","Chan",21,12))
classroom <- data.frame(first = c("Jacques","Charles"), last = c("Sham","Siu"), age = c(21,21))
classroom$work_exp <- c(64,24)
dplyr::bind_rows(classroom, data.frame(first="Spencer",last="Chan",age=21,work_exp=12))
classroom <- cbind(classroom, senior=c(T,T,T))
classroom
classroom <- dplyr::bind_rows(classroom, data.frame(first="Spencer",last="Chan",age=21,work_exp=12))
classroom
classroom <- cbind(classroom, senior=c(T,T,T))
classroom
classroom <- bind_cols(classroom,data.frame(fromHK = c(T,T,T)))
classroom <- dplyr::bind_cols(classroom,data.frame(fromHK = c(T,T,T)))
classroom
list(1,"a",T)
length(x)
,
x <- list(1,"a",T)
length(x)
nrow(x)
library(dplyr)
library(tidyverse)
library(magrittr)
library(knitr)
## Create carCompany for Part A
set.seed(100)
company <- c("Ford","GM","Honda","Toyota","Sabaru")
companyProb <- c(0.24,0.24,0.24,0.24,0.04)
carCompany <- sample(company, 250000, replace = T, prob = companyProb)
## Create mpg for Part B
set.seed(101)
mpg <- rnorm(250000,19,sqrt(9))
?norm
## Create sizeClass for Part C
set.seed(102)
size <- c("Compact","Mid-Size","Full-Size","Crossover","SUV")
sizeClass <- sample(size, 250000, replace = T)
## Create electric for Part D
set.seed(103)
electric <- sample(c(T,F),250000,replace = T, prob = c(0.05,0.95))
## Create a data frame for myDF
myDF <- data.frame(carCompany,mpg,sizeClass,electric)
myDF %>% count(carCompany) %>% arrange(desc(n)) %>% select(carCompany) %>% slice(1)
myDF %>% count(carCompany) %>% arrange(desc(n)) %>% slice(1)
myDF %>% nrow(.)
census <- read.csv("/Users/jacquessham/Documents/BSDS100/Assignment3/census2015.csv")
census %>% group_by(State) %>% summarise(totalPopulation = sum(TotalPop))
census %>% group_by(State) %>% summarise(totalPopulation = sum(TotalPop)) %>% mutate(prct = totalPopulation/sum(totalPopulation))
%>% filter(prct >= 0.03 & prct <= 0.04)
census %>% group_by(State) %>% summarise(totalPopulation = sum(TotalPop))
%>% mutate(prct = totalPopulation/sum(totalPopulation))
%>% filter(prct >= 0.03 & prct <= 0.04)
census %>% group_by(State) %>% summarise(totalPopulation = sum(TotalPop)) %>% mutate(prct = totalPopulation/sum(totalPopulation)) %>% filter(prct >= 0.03 & prct <= 0.04)
census %>% group_by(State) %>%
summarise(totalPopulation = sum(TotalPop)) %>%
mutate(prct = totalPopulation/sum(totalPopulation)) %>% filter(prct >= 0.03 & prct <= 0.04)
mutate(prct = totalPopulation/sum(totalPopulation)) %>% filter(prct >= 0.03 & prct <= 0.04) %>% select(State) %>% slice(3)
census %>% group_by(State) %>%
summarise(totalPopulation = sum(TotalPop)) %>%
mutate(prct = totalPopulation/sum(totalPopulation)) %>% filter(prct >= 0.03 & prct <= 0.04) %>% select(State) %>% slice(3)
census %>% group_by(State) %>%
summarise(totalPopulation = sum(TotalPop)) %>%
mutate(prct = totalPopulation/sum(totalPopulation)) %>% filter(prct >= 0.03 & prct <= 0.04) %>% select(-State) %>% slice(3)
set.seed(99)
myVec <- sample(c(LETTERS,NA),100000,replace = T)
sum(is.na(myVec))
length(is.na(myVec))
length(is.na(myVec))
sum(is.na(myVec))
sum(myVec[!is.na(myVec)]!="A" & myVec[!is.na(myVec)] !="Z")
myVec <- factor(myVec,levels = LETTERS,ordered=T)
sum(myVec < "F")
sum(myVec < "F",na.rm=T)
cars <- sample(c("Ford","GM"),prob=c(0.9,0.1),repleace =T)
cars <- sample(c("Ford","GM"),prob=c(0.9,0.1),replace =T)
cars
cars <- sample(c("Ford","GM"),100000,prob=c(0.9,0.1),replace =T)
cars
glimpse(cars)
dplyr::glimpse(cars)
max(cars)
sum(cars=="Ford")
sum(cars=="Ford")/length(cars)
library(dplyr)
library(tidyverse)
library(magrittr)
library(knitr)
## Create carCompany for Part A
set.seed(100)
company <- c("Ford","GM","Honda","Toyota","Sabaru")
companyProb <- c(0.24,0.24,0.24,0.24,0.04)
carCompany <- sample(company, 250000, replace = T, prob = companyProb)
## Create mpg for Part B
set.seed(101)
mpg <- rnorm(250000,19,sqrt(9))
?norm
## Create sizeClass for Part C
set.seed(102)
size <- c("Compact","Mid-Size","Full-Size","Crossover","SUV")
sizeClass <- sample(size, 250000, replace = T)
## Create electric for Part D
set.seed(103)
electric <- sample(c(T,F),250000,replace = T, prob = c(0.05,0.95))
## Create a data frame for myDF
myDF <- data.frame(carCompany,mpg,sizeClass,electric)
max(myDF$carCompany)
max(norw(myDF$carCompany))
max(nrow(myDF$carCompany))
max(sum(myDF$carCompany))
max(sum(nrow(myDF$carCompany)))
nrow(myDF$carCompany)
table(myDF$carCompany)
max(table(myDF$carCompany))
max(table(myDF$carCompany))/nrow(myDF)
which(max(table(myDF$carCompany[electric=T])))
which(myDF$carCompany==max(table(myDF$carCompany[electric=T])))
table(myDF$carCompany[electric=T]))
table(myDF$carCompany[electric=T])
table(myDF$carCompany[electric==T])
sum(myDF$sizeClass == "Compact" & mpg <18)
myDF %>% count(carCompany) %>% arrange(desc(.))
myDF %>% count(carCompany) %>% arrange(desc(n))
myDF %>% count(carCompany) %>% arrange(desc(n)) %>% slice(1) %>% select(carCompany)
myDF %>% count(carCompany) %>% mutate(percentShare = n/nrow(carCompany)) %>% arrange(desc(.))
myDF %>% count(carCompany) %>% summarise(percentShare = n/nrow(carComapny))
myDF %>% count(carCompany) %>% summarise(percentShare = n/nrow(carCompany))
myDF %>% count(carCompany) %>% mutate(percentShare = n/nrow(carCompany))
myDF %>% count(carCompany) %>% mutate(percentShare = n/sum(carCompany))
myDF %>% count(carCompany) %>% mutate(percentShare = n/sum(n))
myDF %>% count(carCompany) %>% mutate(percentShare = n/sum(n)) %>% slice(1) %>% select(carCompany)
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(myDF)
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(filter(sizeClass=="Compact"))
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(myDF,filter(sizeClass=="Compact"))
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(filter(myDF,sizeClass=="Compact"))
myDF %>% filter(electric==T) %>% nrow(.)/nrow(myDF)
myDF %>% filter(electric==T) %>% count(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% max(n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% top_n(n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% top_n(n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% top_n(1,n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(sizeClass) %>% top_n(1,n) %>% select(sizeClass)
census <- read.csv("/Users/jacquessham/Documents/BSDS100/Assignment3/census2015.csv")
dplyr::glimpse(census)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% arrange(desc(.))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% arrange(desc(statePop))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(statePop/sum(statePop))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% slice(5)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% slice(1:5)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% filter(prct>= 0.3 &prct<= 0.4)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% filter(prct>= 0.03 &prct<= 0.04)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% filter(prct>= 0.03 &prct<= 0.04) %>% top_n(1,prct) %>% select(State)
myVec <- factor(c("o","l","s"),levels=c("o","l"),ordered=T)
myVec
data <- babynames
library(babynames)
data <- babynames
library(dplyr)
library(magrittr)
glimpse(data)
data %>% group_by(year) %>% summarise(total = sum(n))
data %>% group_by(year) %>% summarise(total = sum(n)) %>% slice(seq(1,nrow(.),by=20))
data %>% count(year) %>% slice(seq(1,nrow(.),by=20))
library(hflights)
data <- hflights
glimpse(data)
data %>% group_by(UniqueCarrier) %>% summarise(meanAirTime = mean(AirTime)) %>% mutate(mean++ = meanAirTime+1)
data %>% group_by(UniqueCarrier) %>% summarise(meanAirTime = mean(AirTime)) %>% mutate(meanplusplus = meanAirTime+1)
data %>% group_by(UniqueCarrier) %>% summarise(meanAirTime = mean(AirTime,na.rm=T)) %>% mutate(meanplusplus = meanAirTime+1)
table(data$UniqueCarrier)
max(table(data$UniqueCarrier))
glimpse(data)
max(table(data$UniqueCarrier[Cancelled==T]))
max(table(data$UniqueCarrier[data$Cancelled==T]))
sum(table(data$UniqueCarrier[data$Distance>1000]))
sum(table(data$UniqueCarrier[data$Distance>2000]))
table(data$UniqueCarrier[data$Distance>2000])
sum(table(data$UniqueCarrier[data$Distance>1000]))
table(data$UniqueCarrier[data$Distance>1000])
library(dplyr)
library(magrittr)
data %>% filter(Cancelled==T) %>% group_by(UniqueCarrier) %>% arrange(desc(.))
data %>% filter(Cancelled==T) %>% count(UniqueCarrier) %>% arrange(desc(.))
data %>% filter(Cancelled==T) %>% count(UniqueCarrier) %>% arrange(desc(n))
data %>% filter(Cancelled==T) %>% count(UniqueCarrier) %>% arrange(desc(n)) %>% slice(1)
max(table(data$UniqueCarrier[data$Cancelled==T]))
data %>% filter(Distance>1000) %>% nrow(.)
sum(table(data$UniqueCarrier[data$Distance>1000]))
library(ggplot2)
data <- diamonds
View(data)
library(dplyr)
library(magrittr)
data <- read.csv(/Users/jacquessham/Documents/BSDS100/Examples/Week7/mammalSleep.csv)
data <- read.csv("/Users/jacquessham/Documents/BSDS100/Examples/Week7/mammalSleep.csv")
glimpse(data)
glimpse(data)
data %>% ggplot(aes(x= vore,y= sleep_total)) %>% geom_point()
library(ggplot2)
data %>% ggplot(aes(x= vore,y= sleep_total)) %>% geom_point()
data %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% select(!is.na(.)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% slice(!is.na(.)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
group_by(vore) %>% plot(mean(sleep_total))
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
group_by(vore) %>% plot(mean(sleep_total))
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
group_by(vore)
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
group_by(vore) %>% summarise(mean_sleep = mean(sleep_total))
data %>% group_by(vore) %>% summarise(mean_sleep = mean(sleep_total))
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% filter(!is.na(vore)) %>%group_by(vore) %>% summarise(mean_sleep = mean(sleep_total))
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), colours(vore)) + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), colour= vore) + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), fill = vore) + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), fill = "vore") + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), colour = vore) + geom_point()
library(dplyr)
library(magrittr)
library(ggplot2)
library(devtool)
library(ggmap)
library(maps)
library(mapdata)
usa <- map_data("world")
ggplot() + geom_polygon(data = usa, aes(x=long,y=lat,group=group)) + coord_fixed(1.3)
install.packages(c("BH", "bindr", "bindrcpp", "broom", "curl", "DBI", "hms", "knitr", "lme4", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "plogr", "quantreg", "Rcpp", "RcppEigen", "rlang", "rmarkdown", "rpart", "selectr", "stringi", "stringr", "tidyselect", "viridis", "viridisLite", "withr", "XML", "yaml"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "curl",
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","geomSumm","region","type","category","terminal","area","pax")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
View(data)
data %>% revalue(geomSumm,c("Domestic"=T,"International"=F))
library(dplyr)
library(magrittr)
library(ggplot2)
library(devtool)
library(ggmap)
library(maps)
library(mapdata)
names(data) <- c("date","operAirline","operCode","airline","code","geomSumm","region","type","category","terminal","area","pax")
data %>% revalue(geomSumm,c("Domestic"=T,"International"=F))
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
library(plyr)
data %>% plyr::revalue(geomSumm,c("Domestic"=T,"International"=F))
data %>% plyr::revalue(geomSumm,c("Domestic"="1","International"="0"))
data %>% plyr::revalue(data$geomSumm,c("Domestic"="1","International"="0"))
plyr::revalue(data$geomSumm,c("Domestic"="1","International"="0"))
data$geomSumm <- plyr::revalue(data$geomSumm,c("Domestic"="1","International"="0"))
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$Domestic,c("Domestic"="1","International"="0"))
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$Domestic,c("Domestic"="1","International"="0"))
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$isDomestic,c("Domestic"="1","International"="0"))
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$isDomestic,c("Domestic"=T,"International"=F))
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
data$date <- as.POSIXct("200507", format = "%Y%m")
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$isDomestic,c("Domestic"=T,"International"=F))
data$date <- as.Date(data$date, format = "%Y%m")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
data$date <- as.Date(data$date, format = "%Y%m")
data$date <- as.Date(data$date,origin="200507", format = "%Y%m")
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$isDomestic,c("Domestic"=T,"International"=F))
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
table(data$date)
date$date <- as.character(data$data)
date$date <- as.character(data$date)
date$date <- as.character(data$date, stringAsFactors=F)
data$date <- as.character(data$date, stringAsFactors=F)
data %>% mutate(year = substr(date,1,4))
data$year <- data %>% mutate(year = substr(date,1,4))
data$year <- data %>% mutate(year = substr(date$date,1,4))
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
data$isDomestic <- plyr::revalue(data$isDomestic,c("Domestic"=T,"International"=F))
data$date <- as.character(data$date, stringAsFactors=F)
data$year <- substr(date,1,4)
data$year <- substr(data$date,1,4)
View(data)
date$month <- substr(data$date,5,6)
data$month <- substr(data$date,5,6)
year_min <- min(as.numeric(data$year))
year_max <- max(as.numeric(data$year))
data$month <- factor(as.numeric(data$month),labels = c("January","February","March","April","May","June","July","August","September","October","November","December"),levels = 1:12,ordered = T)
data <- data(-c(date))
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
## Rename the column names
names(data) <- c("date","operAirline","operCode","airline","code","isDomestic","region","type","category","terminal","area","pax")
## Convert isDomestic to boolean
data$isDomestic <- plyr::revalue(data$isDomestic,c("Domestic"=T,"International"=F))
data$date <- as.character(data$date, stringAsFactors=F)
## Break date into year and month
data$year <- substr(data$date,1,4)
data$month <- substr(data$date,5,6)
## Find the year range of the data frame
year_min <- min(as.numeric(data$year))
year_max <- max(as.numeric(data$year))
## Convert month to factor and label in English
data$month <- factor(as.numeric(data$month),labels = c("January","February","March","April","May","June","July","August","September","October","November","December"),levels = 1:12,ordered = T)
## Take out date
data <- data[-c(date)]
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
View(data)
data <- data[-c(date)]
data <- data[-c("date")]
data$date <- NULL
